<canvas class="bg-zinc-200 dark:bg-neutral-800" id="hover-circle-canvas">
</canvas>
<div class="mt-2 flex justify-center gap-2">
  <label
    class="rounded-md bg-zinc-200 px-2 py-1 font-medium dark:bg-neutral-600"
  >
    <input name="fill-type" value="gradual" type="radio" checked />
     Gradual fill</label
  >
  <label
    class="rounded-md bg-zinc-200 px-2 py-1 font-medium checked:bg-zinc-300 dark:bg-neutral-600"
  >
    <input name="fill-type" value="almost" type="radio" />
     Almost fully</label
  >
</div>

<script>
  import { canvas } from '../lib/canvas'
  import gsap from 'gsap'

  let fillType: 'gradual' | 'almost' = 'gradual'
  const SETTLED_POINTER_RADIUS = 10
  const START_POINTER_SCALE = 7
  let mouseEnter = false
  const appState = {
    circleScale: 1,
  }

  const fillTypeRadios = document.querySelectorAll(
    'input[name="fill-type"]',
  ) as NodeListOf<HTMLInputElement>

  fillTypeRadios.forEach((radio) => {
    radio.addEventListener('change', () => {
      if (radio.checked) {
        fillType = radio.value as 'gradual' | 'almost'
      }
    })
  })

  canvas(
    '#hover-circle-canvas',
    (ctx, config) => {
      const { width, height, mouseX, mouseY, colors } = config
      const [cx, cy] = [width / 2, height / 2]
      const buttonWidth = width * 0.3
      const buttonHeight = height * 0.12

      const [bx, by] = [cx - buttonWidth / 2, cy - buttonHeight / 2]

      {
        // circle bound to pointer
        ctx.beginPath()
        ctx.fillStyle = appState.circleScale > 1 ? colors.light : colors.dark
        ctx.arc(
          mouseX,
          mouseY,
          SETTLED_POINTER_RADIUS * appState.circleScale,
          0,
          Math.PI * 2,
        )
        ctx.fill()

        ctx.globalCompositeOperation = 'xor'

        ctx.beginPath()
        ctx.fillStyle = colors.light
        const buttonBorder = new Path2D()
        ctx.strokeStyle = colors.dark
        ctx.lineWidth = 4
        buttonBorder.roundRect(bx, by, buttonWidth, buttonHeight, 30)
        ctx.fill(buttonBorder)

        mouseEnter = ctx.isPointInPath(buttonBorder, mouseX, mouseY)

        ctx.globalCompositeOperation = 'source-over'
      }

      {
        ctx.save()
        ctx.beginPath()
        ctx.roundRect(bx, by, buttonWidth, buttonHeight, 30)
        ctx.clip()

        ctx.beginPath()
        ctx.fillStyle = colors.dark
        ctx.arc(
          mouseX,
          mouseY,
          SETTLED_POINTER_RADIUS * appState.circleScale,
          0,
          Math.PI * 2,
        )
        ctx.fill()
        ctx.restore()
      }

      {
        ctx.save()
        ctx.beginPath()
        ctx.strokeStyle = colors.dark
        ctx.lineWidth = 4
        ctx.roundRect(bx, by, buttonWidth, buttonHeight, 30)
        ctx.stroke()
        ctx.restore()
      }

      {
        ctx.save()

        ctx.fillStyle = mouseEnter ? colors.light : colors.dark
        ctx.font = 'bold 24px sans-serif'
        ctx.textAlign = 'center'
        ctx.textBaseline = 'middle'

        ctx.fillText(
          'Freestyler x GR',
          bx + buttonWidth / 2,
          by + buttonHeight / 2,
        )

        ctx.restore()
      }

      if (mouseEnter) {
        const expandFactor = fillType === 'gradual' ? 1.2 :3
        const distanceToCenter = Math.abs(cx - mouseX)
        const distanceToCenterRatio = 1 - distanceToCenter / (buttonWidth / 2)
        gsap.to(appState, {
          circleScale: START_POINTER_SCALE * (expandFactor + distanceToCenterRatio),
          duration: 0.25
        })
      } else {
        gsap.to(appState, {
          circleScale: 1,
        })
      }
    },
    {
      animate: true,
    },
  )
</script>
